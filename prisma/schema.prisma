// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String?
  googleId      String         @unique
  name          String?
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Doc           Doc[]
  EncryptedDoc  EncryptedDoc[]
  Account       Account[]
  Session       Session[]
}

model Doc {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail       String
  name            String
  fileName        String            @default("")
  description     String?
  fileType        String
  size            BigInt            @default(0)
  path            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SharableDocs    SharableDocs[]
  DocShareRequest DocShareRequest[]
}

model EncryptedDoc {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String
  name        String
  fileName    String
  description String?
  fileType    String
  size        BigInt   @default(0)
  path        String?
  passKey     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SharableDocs {
  id        String   @id @default(uuid())
  doc       Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  docId     String
  accessed  Int      @default(0)
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model DocShareRequest {
  id          Int      @id @default(autoincrement())
  senderName  String
  senderEmail String?
  message     String
  doc         Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  docId       String
  visited     Boolean  @default(false)
  createdAt   DateTime @default(now())
}
